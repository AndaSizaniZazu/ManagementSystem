@page "/classlist"
@using Csla;
@using ManagementSystem.BusinessLogicLayer;
@using MudBlazor;
@inject IDataPortalFactory Factory
@inject IDialogService DialogService



<MudDataGrid T="ClassBL" Items="@classList" Hover="true" Striped="true" MultiSelection="false" Filterable="false" SortMode="@SortMode.None" Groupable="false">
    <Columns>
        <PropertyColumn Property="x => x.ClassName"  />
        <PropertyColumn Property="x => x.FacilitatorFullName" />
        <PropertyColumn Property="x => x.CourseName" />

        <TemplateColumn CellClass="d-flex justify-end">
            <CellTemplate>
                <MudStack Row>
                    <MudIconButton Icon="@Icons.Material.Filled.Edit" aria-label="update" Color="@Color.Primary" OnClick="@(()=>Modal(@context.Item))"></MudIconButton>
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" aria-label="delete" Color="@Color.Error" OnClick="@(()=>OnButtonClicked(@context.Item))"></MudIconButton>
                </MudStack>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
</MudDataGrid>


<MudSwitch @bind-Checked="_loading">Show Loading</MudSwitch>

@code {

    private bool _loading;
    public ClassListBL classList { get; set; }


    protected override async Task OnInitializedAsync()
    {
        classList = Factory.GetPortal<ClassListBL>().Fetch();

    }

   
    public void Modal(ClassBL item)
    {
        DialogOptions options = new DialogOptions {  FullWidth = true, CloseOnEscapeKey = true };
        var parameters = new DialogParameters<UpdateClass>();
        parameters.Add(x => x.Class, item);
        DialogService.Show<UpdateClass>("Update Class",parameters, options);
    }
    private async void OnButtonClicked(ClassBL item)
    {
        string state = "Message box hasn't been opened yet";
        bool? result = await DialogService.ShowMessageBox(
            "Warning",
            "Are you sure you want to delete?",
            yesText: "Delete!", cancelText: "Cancel");
        state = result == null ? "Canceled" : "Deleted!";
        StateHasChanged();
        if(state =="Deleted!")
        {
            item.Delete();
            _ = await item.SaveAsync();

        }
       
    }


}